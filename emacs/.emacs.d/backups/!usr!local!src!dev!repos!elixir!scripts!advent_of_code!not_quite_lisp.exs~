defmodule NQL do
  def what_floor(floor_string) do
    floor_string
    |> String.reverse
    |> String.to_char_list
    |> Enum.reduce(fn(x,acc) -> up_down(x, acc) end )
  end
end

ExUnit.start([trace: true])

defmodule NQLTest do
  use ExUnit.Case
  import NQL

  test "should be floor zero" do
    assert NQL.what_floor("(())") == 0
    assert NQL.what_floor("()()") == 0
  end

  test "should be floor 3" do
    assert NQL.what_floor("(((") == 3
    assert NQL.what_floor("(()(()(") == 3
    assert NQL.what_floor("))(((((") == 3
  end

  test "should be floor -1" do
    assert NQL.what_floor("())") == -1
    assert NQL.what_floor("))(") == -1
  end

  test "should be floor -3" do
    assert NQL.what_floor(")))") == -3
    assert NQL.what_floor(")())())") == -3
  end

end

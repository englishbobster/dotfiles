defmodule Blackjack.Banker do
  import Blackjack.Points
  import Blackjack.Deck

  def banker_loop(hand, deck, score_to_beat) do
    points = get_points_in_hand(hand)
    points = check_score(hand, points)
    show_status(hand, points)
    {low, high} = points
    :timer.sleep(2000)
    cond do
      low >= score_to_beat ->
        IO.puts ("I win HARHARHAR!..gimmee yer money!")
      low < score_to_beat ->
        IO.puts("I'm gonna twist!")
        {card, remaining_deck} = deal_card(deck)
        banker_loop(hand ++ card, remaining_deck, score_to_beat)
    end
  end

  def check_score(hand, points) do
    case check_limit(points) do
      {:BUST, _} -> lose(hand, points)
      {low, :BUST} -> {low, 0}
      _ -> points
    end
  end

  def show_status(hand, points) do
    IO.puts("I have...")
    show(hand)
    display_points (points)
  end

  def lose(hand, {low, high})do
    show_status(hand, {low, 0})
    IO.puts ("Nooo, I exceeded 21, I am BUSTED! You Win :-(")
    Process.exit(self, "BUSTED!")
  end


end

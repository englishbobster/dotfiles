module UserCtl exposing (..)

import Html exposing (Html)
import Http
import Result exposing (withDefault)
import Json.Encode as Encode
import Json.Decode as Decode
import Base64 as B64


-- Model


type alias Model =
    String


initialModel : Model
initialModel =
    "No contact"



-- Update


type Msg
    = Noop
    | Login (Result Http.Error String)


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        Noop ->
            ( model, Cmd.none )

        Login (Ok result) ->
            ( result, Cmd.none )

        Login (Err error) ->
            ( (toString error), Cmd.none )


usersApi : String -> Int -> String
usersApi host portNr =
    "http://" ++ host ++ ":" ++ (toString portNr) ++ "/api/export/users/"


getUsersRequest : Http.Request String
getUsersRequest =
    Http.request
        { method = "GET"
        , headers = userHeaders
        , url = (usersApi "127.0.0.1" 8091)
        , body = Http.emptyBody
        , expect = Http.expectStringResponse (\resp -> Ok (toString resp))
        , timeout = Nothing
        , withCredentials = True
        }


userHeaders : List Http.Header
userHeaders =
    [ --Http.header "authorization" ("Basic " ++ (base64Credentials "admin" "admin"))
      Http.header "Content-Type" "text/plain"
    , Http.header "Accept" "*/*"
    , Http.header "Accept-Language" "en-US, en;q=0.8"
    ]


base64Credentials : String -> String -> String
base64Credentials user pwd =
    user
        ++ ":"
        ++ pwd
        |> B64.encode
        |> withDefault ""


postLogin : Cmd Msg
postLogin =
    Http.send Login getUsersRequest



-- View


view : Model -> Html Msg
view model =
    Html.text ("Start of project: " ++ model)



-- Subscriptions


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none



-- Main


main =
    Html.program
        { init = ( initialModel, postLogin )
        , view = view
        , update = update
        , subscriptions = subscriptions
        }

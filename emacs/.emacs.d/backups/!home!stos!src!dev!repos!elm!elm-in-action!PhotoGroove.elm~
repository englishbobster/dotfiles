module PhotoGroove exposing (..)

import Html exposing (..)
import Html.Attributes exposing (..)
import Html.Events exposing (onClick)
import Html.App

import Array exposing (Array)
import Random

type alias Photo =
    { url : String }


type alias Model =
    { photos : List Photo
    , selectedUrl : String
    , chosenSize : ThumbnailSize
    }


type ThumbnailSize =
    Small
    | Medium
    | Large


initialModel : Model
initialModel =
    { photos =
          [ { url = "1.jpg" }
          , { url = "2.jpg" }
          , { url = "3.jpg" }
          ]
    , selectedUrl = "1.jpg"
    , chosenSize = Medium
    }


photoArray : Array Photo
photoArray =
    Array.fromList initialModel.photos


urlPrefix : String
urlPrefix =
    "images/"


-- View
type Msg =
    SelectByUrl String
    | SelectByIndex Int
    | SupriseMe
    | SetSize ThumbnailSize


view : Model -> Html Msg
view model =
    div [ class "content" ]
        [ h1 [] [ text "Photo Groove" ]
        , button [ onClick SupriseMe ] [ text "Suprise Me!" ]
        , h3 [] [ text "Thumbnail Size" ]
        , div [ id "choose-size" ] (List.map viewSizeChooser [ Small, Medium, Large ])
        , div [ id "thumbnails", class (sizeToString model.chosenSize) ] (List.map (viewThumbnail model.selectedUrl) model.photos)
        , img [ class "large", src (urlPrefix ++ model.selectedUrl) ] []
        ]

viewThumbnail : String -> Photo -> Html Msg
viewThumbnail selectedUrl thumbnail =
    img [ src (urlPrefix ++ thumbnail.url)
        , classList [ ( "selected", selectedUrl == thumbnail.url ) ]
        , onClick (SelectByUrl thumbnail.url)
        ] []


viewSizeChooser : ThumbnailSize -> Html Msg
viewSizeChooser size =
    span  [] [ input [type' "radio", name "size", onClick (SetSize size) ] []
             , label [] [ text (sizeToString size) ]
             ]


sizeToString : ThumbnailSize -> String
sizeToString size =
    case size of
        Small ->
            "small"
        Medium ->
            "med"
        Large ->
            "large"


getPhotoUrl : Int -> String
getPhotoUrl index =
    case Array.get index photoArray of
        Just photo ->
            photo.url
        Nothing ->
            ""


randomPhotoPicker : Random.Generator Int
randomPhotoPicker =
    Random.int 0 (Array.length photoArray - 1 )


-- Update
update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        SelectByUrl url ->
           ( { model | selectedUrl = url }, Cmd.none )

        SelectByIndex index ->
           ( { model | selectedUrl = getPhotoUrl index }, Cmd.none )

        SupriseMe ->
           ( model, Random.generate SelectByIndex randomPhotoPicker )

        SetSize size ->
           ( { model | chosenSize = size }, Cmd.none )


-- Main
main : Program Never
main =
    Html.App.program
        { init = ( initialModel, Cmd.none )
        , view = view
        , update = update
        , subscriptions = (\model -> Sub.none)
        }

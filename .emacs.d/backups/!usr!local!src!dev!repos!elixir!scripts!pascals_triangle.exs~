defmodule PascalsTriangle do

  #pattern matches no arguments
  def compute_triangle do
    []
  end

  #interface
  def compute_triangle(nr_rows) do
    compute_triangle_ver_one(nr_rows)
  end

  #We can do this with Enumerables and a lambda
  defp compute_triangle_ver_one(nr_rows) do
    rows = nr_rows - 1
    0..rows |> Enum.map(fn row -> build_row(row) end)
  end

  #or we can do this with list comprehension
  #but we could do this with recursion as well..do we need more?
  defp compute_triangle_ver_two(nr_rows) do
    rows = nr_rows - 1
    for row <- 0..rows do
      build_row(row)
    end
  end

  #build a row in the triangle using recursion
  #first function is just an interface simplification
  defp build_row(row_nr) do
    build_row({}, row_nr, row_nr)
  end
  #pattern match our end condition
  #when columns has reached -1 (we index from 0) we return the calculated tuple
  defp build_row(tuple, row_nr, -1) do
    tuple
  end
  #I fucking love recursion dont you?
  defp build_row(tuple, row_nr, column_nr) do
    tuple = Tuple.insert_at(tuple, 0, compute_triangle_element(row_nr, column_nr))
    build_row(tuple, row_nr, column_nr - 1)
  end

  #more recursion and pattern matching to do the element calculation
  #end condition pattern match for column = 0
  defp compute_triangle_element(_, 0) do
    1
  end
  #another end condition pattern match for row = 0
  defp compute_triangle_element(0, _) do
    0
  end
  #awww my brain hurts....thank god for TDD!
  defp compute_triangle_element(row, column) do
    compute_triangle_element(row - 1, column) + compute_triangle_element(row - 1, column - 1)
  end

end

ExUnit.start([trace: true])

defmodule Tests do
  use ExUnit.Case
  alias PascalsTriangle, as: PT

  test "empty triangle" do
    assert PT.compute_triangle == []
  end

  test "test with 4 rows" do
    expected_output = [{1},
                       {1,1},
                       {1,2,1},
                       {1,3,3,1}]
    assert PT.compute_triangle(4) == expected_output
  end

  test "test with 6 rows" do
    expected_output = [{1},
                       {1,1},
                       {1,2,1},
                       {1,3,3,1},
                       {1,4,6,4,1},
                       {1,5,10,10,5,1}]
    assert PT.compute_triangle(6) == expected_output
  end
end
